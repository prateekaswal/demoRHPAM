package com.myspace.nsp_registration;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.regex.*;
/**
 * This class was automatically generated by the data modeler tool.
 */

public class sqlInjection {

    public sqlInjection() {
    }

    public boolean handleSql(String d) {
                  String []restrict =new String[48];
                  restrict[0]="\\";
                  restrict[1]=" help ";
                  restrict[2]="*";
                  restrict[3]="\'";
                  restrict[4]="create";
                  restrict[5]="\\";
                  restrict[6]="<";
                  restrict[7]=">";
                  restrict[8]="exec";
                  restrict[9]=";";
                  restrict[10]="%";
                  restrict[11]="#";
                  restrict[12]=" drop ";
                  restrict[13]="delete";
                  restrict[14]="select";
                  restrict[15]="alter";
                  restrict[16]="update";
                  restrict[17]="$";
                  restrict[18]="&";
                  restrict[19]="select";
                  restrict[20]="select";
                  restrict[21]="<script>";
                  restrict[22]="?";
                  restrict[23]="=";
                  restrict[24]="|";
                  restrict[25]="!";
                  restrict[26]=":";
                  restrict[27]="{";
                  restrict[28]="`";
                  restrict[29]="^";
                  restrict[30]="~";
                  restrict[31]="}";
                  restrict[32]=" DROP ";
                  restrict[33]="DELETE";
                  restrict[34]="SELECT";
                  restrict[35]="ALERT";
                  restrict[36]="UPDATE";
                  restrict[37]="EXEC";
                  restrict[38]="<SCRIPT>";
                  restrict[39]=" HELP ";
                  restrict[40]="SELECT *";
                  restrict[41]="CREATE";
                  restrict[42]=",,";
                  restrict[43]="--";
                  restrict[44]="select";
                  restrict[45]="select";
                  restrict[46]="@@";
                  restrict[47]="\"";

                  String []Str =d.split("-");
                  boolean flag=true;
                 
                  int i=0;
                  while(i<Str.length)
                  {
                      Pattern pattern = Pattern.compile("\\s");
                      Matcher matcher = pattern.matcher(Str[i]);
                      boolean found = matcher.find();
                      
                      if(found){
                          String[] valArray = Str[i].split("\\s");
                          for(int j=0;j<valArray.length;j++){
                              for( int k=0;k<restrict.length;k++)
                              {
                              String x=valArray[j].toUpperCase();
                                      if(x.equals(restrict[k].toUpperCase()))
                                      {
                                          flag=false;
                                          break;
                                      }
                              
                              }
                          }
                          
                      }else{
                          for( int j=0;j<restrict.length;j++)
                          {
                          String x=Str[i].toUpperCase();
                                  if(x.indexOf(restrict[j].toUpperCase())!=-1)
                                  {
                                      flag=false;
                                      break;
                                  }
                          }
                      }
                      
                   i++;
                  }   
               return flag;
                 }
          public boolean handleSqlStudentName(String d) 
                 {
                  String []restrict =new String[48];
                  restrict[0]="\\";
                  restrict[1]=" help ";
                  restrict[2]="*";
                  restrict[3]=" \' ";
                  restrict[4]="create";
                  restrict[5]="\\";
                  restrict[6]="<";
                  restrict[7]=">";
                  restrict[8]="exec";
                  restrict[9]=";";
                  restrict[10]="%";
                  restrict[11]="#";
                  restrict[12]=" drop ";
                  restrict[13]="delete";
                  restrict[14]="select";
                  restrict[15]="alter";
                  restrict[16]="update";
                  restrict[17]="$";
                  restrict[18]="&";
                  restrict[19]="select";
                  restrict[20]="select";
                  restrict[21]="<script>";
                  restrict[22]="?";
                  restrict[23]="=";
                  restrict[24]="|";
                  restrict[25]="!";
                  restrict[26]=":";
                  restrict[27]="{";
                  restrict[28]="`";
                  restrict[29]="^";
                  restrict[30]="~";
                  restrict[31]="}";
                  restrict[32]=" DROP ";
                  restrict[33]="DELETE";
                  restrict[34]="SELECT";
                  restrict[35]="ALERT";
                  restrict[36]="UPDATE";
                  restrict[37]="EXEC";
                  restrict[38]="<SCRIPT>";
                  restrict[39]=" HELP ";
                  restrict[40]="SELECT *";
                  restrict[41]="CREATE";
                  restrict[42]=",,";
                  restrict[43]="--";
                  restrict[44]="select";
                  restrict[45]="select";
                  restrict[46]="@@";
                  restrict[47]="\"";

                  String []Str =d.split("-");
                  boolean flag=true;
                 
                  int i=0;
                  while(i<Str.length)
                  {
                      Pattern pattern = Pattern.compile("\\s");
                      Matcher matcher = pattern.matcher(Str[i]);
                      boolean found = matcher.find();
                      
                      if(found){
                          String[] valArray = Str[i].split("\\s");
                          for(int j=0;j<valArray.length;j++){
                              for( int k=0;k<restrict.length;k++)
                              {
                              String x=valArray[j].toUpperCase();
                                      if(x.equals(restrict[k].toUpperCase()))
                                      {
                                          flag=false;
                                          break;
                                      }
                              
                              }
                          }
                          
                      }else{
                          for( int j=0;j<restrict.length;j++)
                          {
                          String x=Str[i].toUpperCase();
                                  if(x.indexOf(restrict[j].toUpperCase())!=-1)
                                  {
                                      flag=false;
                                      break;
                                  }
                          }
                      }
                      
                   i++;
                  }   
               return flag;
                 }
          public boolean handleSqlNameAsInAadhaar(String d) 
                 {
                  String []restrict =new String[46];
                  restrict[0]="\\";
                  restrict[1]=" help ";
                  restrict[2]="*";
                  restrict[3]="create";
                  restrict[4]="\\";
                  restrict[5]="<";
                  restrict[6]=">";
                  restrict[7]="exec";
                  restrict[8]=";";
                  restrict[9]="%";
                  restrict[10]="#";
                  restrict[11]=" drop ";
                  restrict[12]="delete";
                  restrict[13]="select";
                  restrict[14]="alter";
                  restrict[15]="update";
                  restrict[16]="$";
                  restrict[17]="&";
                  restrict[18]="select";
                  restrict[19]="select";
                  restrict[20]="<script>";
                  restrict[21]="?";
                  restrict[22]="=";
                  restrict[23]="|";
                  restrict[24]="!";
                  restrict[25]=":";
                  restrict[26]="{";
                  restrict[27]="^";
                  restrict[28]="~";
                  restrict[29]="}";
                  restrict[30]=" DROP ";
                  restrict[31]="DELETE";
                  restrict[32]="SELECT";
                  restrict[33]="ALERT";
                  restrict[34]="UPDATE";
                  restrict[35]="EXEC";
                  restrict[36]="<SCRIPT>";
                  restrict[37]=" HELP ";
                  restrict[38]="SELECT *";
                  restrict[39]="CREATE";
                  restrict[40]=",,";
                  restrict[41]="--";
                  restrict[42]="select";
                  restrict[43]="select";
                  restrict[44]="@@";
                  restrict[45]="\"";

                  String []Str =d.split("-");
                  boolean flag=true;
                 
                  int i=0;
                  while(i<Str.length)
                  {
                      Pattern pattern = Pattern.compile("\\s");
                      Matcher matcher = pattern.matcher(Str[i]);
                      boolean found = matcher.find();
                      
                      if(found){
                          String[] valArray = Str[i].split("\\s");
                          for(int j=0;j<valArray.length;j++){
                              for( int k=0;k<restrict.length;k++)
                              {
                              String x=valArray[j].toUpperCase();
                                      if(x.equals(restrict[k].toUpperCase()))
                                      {
                                          flag=false;
                                          break;
                                      }
                              
                              }
                          }
                          
                      }else{
                          for( int j=0;j<restrict.length;j++)
                          {
                          String x=Str[i].toUpperCase();
                                  if(x.indexOf(restrict[j].toUpperCase())!=-1)
                                  {
                                      flag=false;
                                      break;
                                  }
                          }
                      }
                      
                   i++;
                  }   
               return flag;
                 }
 public boolean handleSqlDateTime(String d) 
                 {
                  String []restrict =new String[48];
                  restrict[0]="\\";
                  restrict[1]=" help ";
                  restrict[2]="*";
                  restrict[3]="\'";
                  restrict[4]="create";
                  restrict[5]="\\";
                  restrict[6]="<";
                  restrict[7]=">";
                  restrict[8]="exec";
                  restrict[9]=";";
                  restrict[10]="%";
                  restrict[11]="#";
                  restrict[12]=" drop ";
                  restrict[13]="delete";
                  restrict[14]="select";
                  restrict[15]="alter";
                  restrict[16]="update";
                  restrict[17]="$";
                  restrict[18]="&";
                  restrict[19]="select";
                  restrict[20]="select";
                  restrict[21]="<script>";
                  restrict[22]="?";
                  restrict[23]="=";
                  restrict[24]="|";
                  restrict[25]="!";
                  restrict[26]="{";
                  restrict[27]="{";
                  restrict[28]="`";
                  restrict[29]="^";
                  restrict[30]="~";
                  restrict[31]="}";
                  restrict[32]=" DROP ";
                  restrict[33]="DELETE";
                  restrict[34]="SELECT";
                  restrict[35]="ALERT";
                  restrict[36]="UPDATE";
                  restrict[37]="EXEC";
                  restrict[38]="<SCRIPT>";
                  restrict[39]=" HELP ";
                  restrict[40]="SELECT *";
                  restrict[41]="CREATE";
                  restrict[42]=",,";
                  restrict[43]="--";
                  restrict[44]="select";
                  restrict[45]="select";
                  restrict[46]="@@";
                  restrict[47]="\"";

                  String []Str =d.split("-");
                  boolean flag=true;
                 
                  int i=0;
                  while(i<Str.length)
                  {
                      Pattern pattern = Pattern.compile("\\s");
                      Matcher matcher = pattern.matcher(Str[i]);
                      boolean found = matcher.find();
                      
                      if(found){
                          String[] valArray = Str[i].split("\\s");
                          for(int j=0;j<valArray.length;j++){
                              for( int k=0;k<restrict.length;k++)
                              {
                              String x=valArray[j].toUpperCase();
                                      if(x.equals(restrict[k].toUpperCase()))
                                      {
                                          flag=false;
                                          break;
                                      }
                              
                              }
                          }
                          
                      }else{
                          for( int j=0;j<restrict.length;j++)
                          {
                          String x=Str[i].toUpperCase();
                                  if(x.indexOf(restrict[j].toUpperCase())!=-1)
                                  {
                                      flag=false;
                                      break;
                                  }
                          }
                      }
                      
                   i++;
                  }   
               return flag;
                 }
          
        //this method check for mobile no is numeric and 10 digit
         public boolean checkMobile(String no) 
         {
                    if(no.length()==0)
                     {
                        return true; 
                     }
                     else
                     {
                      if(no.length()==10)
                     {
                    //       System.out.println(no.length());      
                      Pattern p = Pattern.compile("[0-9]{10}");
                      Matcher m = p.matcher(no);
                     return m.find();
                    
                     }
                      else
                          return false;
                     }         
         }
         
    public boolean checkmail(String id) 
        {
           if(id.length()!=0) {
               // Pattern p = Pattern.compile("^[_A-Za-z0-9-]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$");
               // Pattern p = Pattern.compile("^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z]{2,4})$");
                Pattern p = Pattern.compile("^([a-zA-Z0-9_\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+$");            
                Matcher m = p.matcher(id);
                return m.matches();
           }
           else
           {
           return true;
           }
        }
         // this method check for numeric value 
         public boolean checkNumber(String d) 
         {
              String []Str =d.split("-");
            boolean flag=true;
            int i=0;
            while(i<Str.length)
            {
            // if(Str[i].length()<1)
             //{
              //   flag=false;
               //   break;
             //}
            //else
           //{
           if(Str[i].trim().length()>0)
           {  
             Pattern p = Pattern.compile("\\d");
             Matcher m = p.matcher(Str[i]);
              flag=m.find();
             if(flag==false)
               {
                  flag=false;
                  break;
               }
            }
            i++;
        }
             
              return flag;
    } 
    
    public boolean checkNull(String []d) 
         {
           String []Str=d;
           boolean flag=true;
           int i=0;
            while(i<Str.length)
            {
             if(Str[i].trim().length()<1)
             {
                 flag=false;
                 break;                
             }
            i++;
        }
             
              return flag;
    }   
        public boolean isEmpty(String s) {
		 return (s == null ||("".equals(s)) ||(" ".equals(s))||("null".equals(s)) || s.length()<= 0||"".equals(s.trim()));
	}
        public static boolean isEmptyCheck(String s) {
		 return (s == null ||("".equals(s)) ||(" ".equals(s))||("null".equals(s)) || s.length()<= 0);
	}
	public boolean notEmpty(String s) {
		 return (s != null &&(!"".equals(s))&&(!"null".equals(s)) && s.length() > 0);
	}
	public  boolean notZero(String s) {
		 return (notEmpty(s) && (!"0".equals(s)));
	}
	public  boolean isZero(String s) {
		 return (isEmpty(s) || ("0".equals(s)));
	}
         
 //THIS METHOD CHECK INTEGER TYPE VALUE AND NULL VALUE
        public  boolean isIntANDnull(String []d)
        {
                     
         String []Str=d;
        boolean flag=true;
       int i=0;
        while(i<Str.length)
        {
         if(Str[i].trim().length()<1)
         {
             flag=false;
             break;
             
         }
         else
         {
             
             Pattern p = Pattern.compile("[0-9]");
             
		 Matcher m = p.matcher(Str[i].trim());
		 boolean result = m.find();
		 if (result) 
                 {
                        flag=true;
                        
		 }
		 else {
                        flag=false;
                        break;
		 }
             
         }
                 i++;
            
         }
       return flag;
      }
        //THIS METHOD CHECK INTEGER TYPE VALUE AND NULL VALUE
        public  boolean isIntANDnull(int []d)
        {
                     
         int []St=d;
         String []Str=new String[St.length];
         int j=0;
         while(St.length>j)
         {
            Str[j]= String.valueOf(St[j]);
            j++;
         }
         
        boolean flag=true;
       int i=0;
        while(i<Str.length)
        {
         if(Str[i].trim().length()<1)
         {
             flag=false;
             break;
             
         }
         else
         {
             
             Pattern p = Pattern.compile("[0-9]");
             
		 Matcher m = p.matcher(Str[i].trim());
		 boolean result = m.find();
		 if (result) 
                 {
                        flag=true;
                        
		 }
		 else {
                        flag=false;
                        break;
		 }
             
         }
                 i++;
            
         }
       return flag;
      }
      //this method compare two value if values are equal then return false 
      //this method can be used to check dropdown whether user selected any value or not 
      // Use as pass the value is=dropdown filed and notShould=default value e.g."o" for Select
          public  boolean isValidDropdownValue(String is, String notShould) 
               {
                  boolean flag;
                   
                   Pattern p = Pattern.compile(notShould);
                       Matcher m = p.matcher(is);
                          boolean result = m.matches();
                          if (result) 
                          {
                                 flag=true;
                                 
                          }
                          else {
                                 flag=false;
                                 
                          }
                          return flag;
                      
                  }
                  
          //this method compare two or more than two value if values are equal then return false 
          //this method can be used to check dropdown whether user selected any value or not 
          // Use as pass the value is=dropdown filed and notShould=default value e.g."o" for Select  
               public  boolean isValidDropdownValue(String []is, String []notShould) 
               {
                  boolean flag=false;
                   if(is.length==notShould.length)
                   {
                       int i=0;
                       while(is.length>i)
                       {
                   Pattern p = Pattern.compile(notShould[i]);
                       Matcher m = p.matcher(is[i]);
                          boolean result = m.matches();
                          if (result) 
                          {
                                 flag=false;
                                  break;
                          }
                          else {
                                 flag=true;
                                
                                 
                          }
                        
                          i++;
                       }
                  }
                     return flag;
               }
          
          // Only For  User Name & Password
                    public boolean handleSqlPassword(String d) 
                           {
                            String []restrict =new String[14];
                            restrict[0]="help";
                            restrict[1]="create";
                            restrict[2]="exec";
                            restrict[3]="drop";
                            restrict[4]="delete";
                            restrict[5]="select";
                            restrict[6]="alter";
                            restrict[7]="update";
                            restrict[8]="script";
                            restrict[9]="scripts";
                            restrict[10]="<script>";
                            restrict[11]="run ";
                            restrict[12]="\\";
                       //     restrict[13]="OR";
                       //     restrict[14]="or";
                       //     restrict[15]="AND";
                      //      restrict[16]="and";
                            restrict[13]="--";                           
                           
                            String []Str =d.split("-");
                            boolean flag=true;
                           
                            int i=0;
                            while(i<Str.length)
                            {
                             for( int j=0;j<restrict.length;j++)
                            {
                            if(Str[i].indexOf(restrict[j])!=-1)
                            {
                                flag=false;
                                break;
                                        
                            }
                          }
                             i++;
                           }   
                         return flag;
                  }

          public boolean checkMaxLength(String d,int maxlength)
                 {
                 String []Str =d.split("-");
                 boolean flag=true;
                 int i=0;
                 while(i<Str.length)
                 {
                 if(Str[i].length()>maxlength)
                 {
                 flag=false;
                 break;
                 }
                 i++;
                 }
                 return flag;
                 }

            // To check Valid Date Formate
                public boolean isThisDateValid(String dateToValidate, String dateFromat){
                        if(dateToValidate == null)
                        {
                                return false;
                        }

                        SimpleDateFormat sdf = new SimpleDateFormat(dateFromat);
                        sdf.setLenient(false);

                        try {
                                //if not valid, it will throw ParseException
                                Date date = sdf.parse(dateToValidate);

                        } catch (ParseException e) {
                                return false;
                        }

                        return true;
                }
                
                public  boolean validateData(String data){
		if(data!=null && !"".equals(data.trim()))
			return true;
		else 
			return false;
	}
                public  boolean validateDOB(String data){
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
		Calendar currObj = Calendar.getInstance();
		
		Calendar minObj= Calendar.getInstance();
		minObj.set(1966, Calendar.JUNE, 30);		//set min year 2000 for dob
		String MIN_DOB=minObj.get(Calendar.DAY_OF_MONTH)+"/"+(minObj.get(Calendar.MONTH)+1)+"/"+minObj.get(Calendar.YEAR);
		
		Calendar maxObj = Calendar.getInstance(); //set max year 2010 for dob
		maxObj.set(2015,(currObj.get(Calendar.MONTH)+1),currObj.get(Calendar.DAY_OF_MONTH));
		String arr[]=null;
		
		boolean flag = false;
		try {
			if(data!=null && !"".equals(data.trim())){
				arr = data.split("/");
				if(arr!=null && arr.length==3){
					if(validateData(arr[0]) && validateData(arr[1]) && validateData(arr[2])){
						if(arr[0].length()==2 && arr[1].length()==2 && arr[2].length()==4){
							if(Integer.valueOf(arr[0])<=31 && Integer.valueOf(arr[1])<=12 && 
									(Integer.valueOf(arr[2])>=minObj.get(Calendar.YEAR) && (Integer.valueOf(arr[2])<=maxObj.get(Calendar.YEAR)))){
								Date date1 = sdf.parse(MIN_DOB);
								Date date2 = sdf.parse(data);
								if(date1.before(date2))
									flag= true;
							}
						}
							
					}						
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
		return flag;
	}
                public  boolean validateClassStartDate(String data){
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
		Calendar currObj = Calendar.getInstance();
		
		Calendar minObj= Calendar.getInstance();
		minObj.set(2019, Calendar.JANUARY, 0);		//set min year 2000 for dob
		String MIN_DOB=minObj.get(Calendar.DAY_OF_MONTH)+"/"+(minObj.get(Calendar.MONTH)+1)+"/"+minObj.get(Calendar.YEAR);
		
		Calendar maxObj = Calendar.getInstance(); //set max year 2010 for dob
                minObj.set(2019, Calendar.DECEMBER, 31);
		//maxObj.set(2018,(currObj.get(Calendar.MONTH)+1),currObj.get(Calendar.DAY_OF_MONTH));
		String arr[]=null;
		
		boolean flag = false;
		try {
			if(data!=null && !"".equals(data.trim())){
				arr = data.split("/");
				if(arr!=null && arr.length==3){
					if(validateData(arr[0]) && validateData(arr[1]) && validateData(arr[2])){
						if(arr[0].length()==2 && arr[1].length()==2 && arr[2].length()==4){
							if(Integer.valueOf(arr[0])<=31 && Integer.valueOf(arr[1])<=12 && 
									(Integer.valueOf(arr[2])>=minObj.get(Calendar.YEAR) && (Integer.valueOf(arr[2])<=maxObj.get(Calendar.YEAR)))){
								Date date1 = sdf.parse(MIN_DOB);
								Date date2 = sdf.parse(data);
								if(date1.before(date2))
									flag= true;
							}
						}
							
					}						
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
		return flag;
	}
                public  boolean validateDate(String data){
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
		Calendar cal = Calendar.getInstance();
		String CURR_DATE=cal.get(Calendar.DAY_OF_MONTH)+"/"+(cal.get(Calendar.MONTH)+1)+"/"+cal.get(Calendar.YEAR);
		
		String arr[]=null;
			
		boolean flag = false;
		try {
			if(data!=null && !"".equals(data.trim())){
				arr = data.split("/");
				if(arr!=null && arr.length==3){
					if(validateData(arr[0]) && validateData(arr[1]) && validateData(arr[2])){
						if(arr[0].length()==2 && arr[1].length()==2 && arr[2].length()==4){
							if(Integer.valueOf(arr[0])<=31 && Integer.valueOf(arr[1])<=12 && Integer.valueOf(arr[2])<=cal.get(Calendar.YEAR)){
								Date date1 = sdf.parse(CURR_DATE);
								Date date2 = sdf.parse(data);
								if(date1.after(date2))
									flag= true;
							}
						}
							
					}						
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
		return flag;
	} 
                
            public String removeWhitespaceChar(String string)
            {
               if(string==null)
               {
                   string="";

               }
               String replaceAll = string.replaceAll("\\s+", " ");
               return replaceAll;
            }


}